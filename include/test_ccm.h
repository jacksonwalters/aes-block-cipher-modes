#ifndef TEST_CCM_VECTORS_H
#define TEST_CCM_VECTORS_H

#include <stdint.h>
#include <stddef.h>

/*
 * Test vectors from NIST SP 800-38C Appendix C
 * All examples use AES-128 with key:
 * K = 40414243 44454647 48494a4b 4c4d4e4f
 */

static const uint8_t CCM_KEY[16] = {
    0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
    0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f
};

/* ===================== Example 1 =====================
 * Klen = 128, Tlen = 32 (4 octets), Nlen = 56 (7 octets), Alen = 64 (8 octets), Plen = 32 (4 octets)
 */
#define CCM_EX1_NONCE_LEN 7
#define CCM_EX1_AAD_LEN 8
#define CCM_EX1_P_LEN 4
#define CCM_EX1_TAG_LEN 4
#define CCM_EX1_C_LEN 8  /* P_LEN + TAG_LEN */

static const uint8_t CCM_EX1_NONCE[CCM_EX1_NONCE_LEN] = {
    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16
};

static const uint8_t CCM_EX1_AAD[CCM_EX1_AAD_LEN] = {
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07
};

static const uint8_t CCM_EX1_P[CCM_EX1_P_LEN] = {
    0x20, 0x21, 0x22, 0x23
};

/* Ciphertext = encrypted_payload || encrypted_tag */
static const uint8_t CCM_EX1_C[CCM_EX1_C_LEN] = {
    0x71, 0x62, 0x01, 0x5b, 0x4d, 0xac, 0x25, 0x5d
};

/* ===================== Example 2 =====================
 * Klen = 128, Tlen = 48 (6 octets), Nlen = 64 (8 octets), Alen = 128 (16 octets), Plen = 128 (16 octets)
 */
#define CCM_EX2_NONCE_LEN 8
#define CCM_EX2_AAD_LEN 16
#define CCM_EX2_P_LEN 16
#define CCM_EX2_TAG_LEN 6
#define CCM_EX2_C_LEN 22  /* P_LEN + TAG_LEN */

static const uint8_t CCM_EX2_NONCE[CCM_EX2_NONCE_LEN] = {
    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17
};

static const uint8_t CCM_EX2_AAD[CCM_EX2_AAD_LEN] = {
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f
};

static const uint8_t CCM_EX2_P[CCM_EX2_P_LEN] = {
    0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
    0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f
};

static const uint8_t CCM_EX2_C[CCM_EX2_C_LEN] = {
    0xd2, 0xa1, 0xf0, 0xe0, 0x51, 0xea, 0x5f, 0x62,
    0x08, 0x1a, 0x77, 0x92, 0x07, 0x3d, 0x59, 0x3d,
    0x1f, 0xc6, 0x4f, 0xbf, 0xac, 0xcd
};

/* ===================== Example 3 =====================
 * Klen = 128, Tlen = 64 (8 octets), Nlen = 96 (12 octets), Alen = 160 (20 octets), Plen = 192 (24 octets)
 */
#define CCM_EX3_NONCE_LEN 12
#define CCM_EX3_AAD_LEN 20
#define CCM_EX3_P_LEN 24
#define CCM_EX3_TAG_LEN 8
#define CCM_EX3_C_LEN 32  /* P_LEN + TAG_LEN */

static const uint8_t CCM_EX3_NONCE[CCM_EX3_NONCE_LEN] = {
    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
    0x18, 0x19, 0x1a, 0x1b
};

static const uint8_t CCM_EX3_AAD[CCM_EX3_AAD_LEN] = {
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
    0x10, 0x11, 0x12, 0x13
};

static const uint8_t CCM_EX3_P[CCM_EX3_P_LEN] = {
    0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
    0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
    0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37
};

static const uint8_t CCM_EX3_C[CCM_EX3_C_LEN] = {
    0xe3, 0xb2, 0x01, 0xa9, 0xf5, 0xb7, 0x1a, 0x7a,
    0x9b, 0x1c, 0xea, 0xec, 0xcd, 0x97, 0xe7, 0x0b,
    0x61, 0x76, 0xaa, 0xd9, 0xa4, 0x42, 0x8a, 0xa5,
    0x48, 0x43, 0x92, 0xfb, 0xc1, 0xb0, 0x99, 0x51
};

#endif /* TEST_CCM_VECTORS_H */